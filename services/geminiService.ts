import { GoogleGenAI } from "@google/genai";

export const generateLinkedInBackground = async (name: string, contactInfo: string, keywords: string[]): Promise<string> => {
    if (!process.env.API_KEY) {
        throw new Error("API_KEY environment variable not set.");
    }
    const ai = new GoogleGenAI({ apiKey: process.env.API_KEY });

    const prompt = `
    Generate a professional LinkedIn banner background image with a 16:9 aspect ratio. The design must be modern, clean, and corporate, featuring a dark navy blue background. The design should incorporate soft, abstract, geometric shapes like circles and overlapping arcs. The color palette must consist of professional blues, vibrant oranges, and energetic yellows for the abstract elements.

    In the horizontal and vertical center of the banner, place the following text in a modern, bold, sans-serif font (color: white or very light gray):
    Line 1: '${name}'
    Line 2: '${contactInfo}' (use the same font but smaller and regular weight, placed directly below the name).
    Ensure the text is perfectly centered and highly legible against the dark background.

    On the far right side of the banner, create a vertically aligned list of the following keywords. The text should be aligned to the right, in a clean, legible, regular-weight sans-serif font (color: a light gray, slightly darker than the main text).
    ${keywords.map(k => `- ${k}`).join('\n')}

    The overall aesthetic must be professional, premium, and uncluttered. Do not include any photographic elements, human figures, or overly complex illustrations. Focus on a polished, abstract design with clean shapes and subtle gradients using the specified color palette.
    `;


    try {
        const response = await ai.models.generateImages({
            model: 'imagen-4.0-generate-001',
            prompt: prompt,
            config: {
              numberOfImages: 1,
              outputMimeType: 'image/png',
              aspectRatio: '16:9',
            },
        });

        if (response.generatedImages && response.generatedImages.length > 0) {
            const base64ImageBytes = response.generatedImages[0].image.imageBytes;
            return `data:image/png;base64,${base64ImageBytes}`;
        } else {
            throw new Error("No image was generated by the API.");
        }
    } catch (error) {
        console.error("Error generating image with Gemini:", error);
        throw new Error("Failed to generate image. The API may be unavailable or the request may have been blocked.");
    }
};